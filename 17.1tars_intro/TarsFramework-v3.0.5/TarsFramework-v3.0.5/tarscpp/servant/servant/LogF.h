// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 3.0.7.
// **********************************************************************

#ifndef __LOGF_H_
#define __LOGF_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Tars.h"
#include "tup/TarsJson.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace tars
{
    struct LogInfo : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "tars.LogInfo";
        }
        static string MD5()
        {
            return "0eea72961fce639e06f8c47bcd420413";
        }
        LogInfo()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            appname = "";
            servername = "";
            sFilename = "";
            sFormat = "";
            setdivision = "";
            bHasSufix = true;
            bHasAppNamePrefix = true;
            bHasSquareBracket = false;
            sConcatStr = "_";
            sSepar = "|";
            sLogType = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(appname, 0);
            _os.write(servername, 1);
            _os.write(sFilename, 2);
            _os.write(sFormat, 3);
            if (setdivision != "")
            {
                _os.write(setdivision, 4);
            }
            if (bHasSufix != true)
            {
                _os.write(bHasSufix, 5);
            }
            if (bHasAppNamePrefix != true)
            {
                _os.write(bHasAppNamePrefix, 6);
            }
            if (bHasSquareBracket != false)
            {
                _os.write(bHasSquareBracket, 7);
            }
            if (sConcatStr != "_")
            {
                _os.write(sConcatStr, 8);
            }
            if (sSepar != "|")
            {
                _os.write(sSepar, 9);
            }
            if (sLogType != "")
            {
                _os.write(sLogType, 10);
            }
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(appname, 0, true);
            _is.read(servername, 1, true);
            _is.read(sFilename, 2, true);
            _is.read(sFormat, 3, true);
            _is.read(setdivision, 4, false);
            _is.read(bHasSufix, 5, false);
            _is.read(bHasAppNamePrefix, 6, false);
            _is.read(bHasSquareBracket, 7, false);
            _is.read(sConcatStr, 8, false);
            _is.read(sSepar, 9, false);
            _is.read(sLogType, 10, false);
        }
        tars::JsonValueObjPtr writeToJson() const
        {
            tars::JsonValueObjPtr p = new tars::JsonValueObj();
            p->value["appname"] = tars::JsonOutput::writeJson(appname);
            p->value["servername"] = tars::JsonOutput::writeJson(servername);
            p->value["sFilename"] = tars::JsonOutput::writeJson(sFilename);
            p->value["sFormat"] = tars::JsonOutput::writeJson(sFormat);
            p->value["setdivision"] = tars::JsonOutput::writeJson(setdivision);
            p->value["bHasSufix"] = tars::JsonOutput::writeJson(bHasSufix);
            p->value["bHasAppNamePrefix"] = tars::JsonOutput::writeJson(bHasAppNamePrefix);
            p->value["bHasSquareBracket"] = tars::JsonOutput::writeJson(bHasSquareBracket);
            p->value["sConcatStr"] = tars::JsonOutput::writeJson(sConcatStr);
            p->value["sSepar"] = tars::JsonOutput::writeJson(sSepar);
            p->value["sLogType"] = tars::JsonOutput::writeJson(sLogType);
            return p;
        }
        string writeToJsonString() const
        {
            return tars::TC_Json::writeValue(writeToJson());
        }
        void readFromJson(const tars::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != tars::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw tars::TC_Json_Exception(s);
            }
            tars::JsonValueObjPtr pObj=tars::JsonValueObjPtr::dynamicCast(p);
            tars::JsonInput::readJson(appname,pObj->value["appname"], true);
            tars::JsonInput::readJson(servername,pObj->value["servername"], true);
            tars::JsonInput::readJson(sFilename,pObj->value["sFilename"], true);
            tars::JsonInput::readJson(sFormat,pObj->value["sFormat"], true);
            tars::JsonInput::readJson(setdivision,pObj->value["setdivision"], false);
            tars::JsonInput::readJson(bHasSufix,pObj->value["bHasSufix"], false);
            tars::JsonInput::readJson(bHasAppNamePrefix,pObj->value["bHasAppNamePrefix"], false);
            tars::JsonInput::readJson(bHasSquareBracket,pObj->value["bHasSquareBracket"], false);
            tars::JsonInput::readJson(sConcatStr,pObj->value["sConcatStr"], false);
            tars::JsonInput::readJson(sSepar,pObj->value["sSepar"], false);
            tars::JsonInput::readJson(sLogType,pObj->value["sLogType"], false);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(tars::TC_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(appname,"appname");
            _ds.display(servername,"servername");
            _ds.display(sFilename,"sFilename");
            _ds.display(sFormat,"sFormat");
            _ds.display(setdivision,"setdivision");
            _ds.display(bHasSufix,"bHasSufix");
            _ds.display(bHasAppNamePrefix,"bHasAppNamePrefix");
            _ds.display(bHasSquareBracket,"bHasSquareBracket");
            _ds.display(sConcatStr,"sConcatStr");
            _ds.display(sSepar,"sSepar");
            _ds.display(sLogType,"sLogType");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(appname, true);
            _ds.displaySimple(servername, true);
            _ds.displaySimple(sFilename, true);
            _ds.displaySimple(sFormat, true);
            _ds.displaySimple(setdivision, true);
            _ds.displaySimple(bHasSufix, true);
            _ds.displaySimple(bHasAppNamePrefix, true);
            _ds.displaySimple(bHasSquareBracket, true);
            _ds.displaySimple(sConcatStr, true);
            _ds.displaySimple(sSepar, true);
            _ds.displaySimple(sLogType, false);
            return _os;
        }
    public:
        std::string appname;
        std::string servername;
        std::string sFilename;
        std::string sFormat;
        std::string setdivision;
        tars::Bool bHasSufix;
        tars::Bool bHasAppNamePrefix;
        tars::Bool bHasSquareBracket;
        std::string sConcatStr;
        std::string sSepar;
        std::string sLogType;
    };
    inline bool operator==(const LogInfo&l, const LogInfo&r)
    {
        return l.appname == r.appname && l.servername == r.servername && l.sFilename == r.sFilename && l.sFormat == r.sFormat && l.setdivision == r.setdivision && l.bHasSufix == r.bHasSufix && l.bHasAppNamePrefix == r.bHasAppNamePrefix && l.bHasSquareBracket == r.bHasSquareBracket && l.sConcatStr == r.sConcatStr && l.sSepar == r.sSepar && l.sLogType == r.sLogType;
    }
    inline bool operator!=(const LogInfo&l, const LogInfo&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const LogInfo&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,LogInfo&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }


    /* callback of async proxy for client */
    class LogPrxCallback: public tars::ServantProxyCallback
    {
    public:
        virtual ~LogPrxCallback(){}
        virtual void callback_logger()
        { throw std::runtime_error("callback_logger() override incorrect."); }
        virtual void callback_logger_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_logger_exception() override incorrect."); }

        virtual void callback_loggerbyInfo()
        { throw std::runtime_error("callback_loggerbyInfo() override incorrect."); }
        virtual void callback_loggerbyInfo_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_loggerbyInfo_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const
        {
            CallbackThreadData * pCbtd = CallbackThreadData::getData();
            assert(pCbtd != NULL);

            if(!pCbtd->getContextValid())
            {
                throw TC_Exception("cann't get response context");
            }
            return pCbtd->getResponseContext();
        }

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __Log_all[]=
            {
                "logger",
                "loggerbyInfo"
            };
            pair<string*, string*> r = equal_range(__Log_all, __Log_all+2, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Log_all)
            {
                case 0:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_logger_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_logger();

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_loggerbyInfo_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response->context);

                    callback_loggerbyInfo();

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<LogPrxCallback> LogPrxCallbackPtr;

    //callback of promise async proxy for client
    class LogPrxCallbackPromise: public tars::ServantProxyCallback
    {
    public:
        virtual ~LogPrxCallbackPromise(){}
    public:
        struct Promiselogger: virtual public TC_HandleBase
        {
        public:
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< LogPrxCallbackPromise::Promiselogger > PromiseloggerPtr;

        LogPrxCallbackPromise(const tars::Promise< LogPrxCallbackPromise::PromiseloggerPtr > &promise)
        : _promise_logger(promise)
        {}
        
        virtual void callback_logger(const LogPrxCallbackPromise::PromiseloggerPtr &ptr)
        {
            _promise_logger.setValue(ptr);
        }
        virtual void callback_logger_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:logger_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_logger.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< LogPrxCallbackPromise::PromiseloggerPtr > _promise_logger;

    public:
        struct PromiseloggerbyInfo: virtual public TC_HandleBase
        {
        public:
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< LogPrxCallbackPromise::PromiseloggerbyInfo > PromiseloggerbyInfoPtr;

        LogPrxCallbackPromise(const tars::Promise< LogPrxCallbackPromise::PromiseloggerbyInfoPtr > &promise)
        : _promise_loggerbyInfo(promise)
        {}
        
        virtual void callback_loggerbyInfo(const LogPrxCallbackPromise::PromiseloggerbyInfoPtr &ptr)
        {
            _promise_loggerbyInfo.setValue(ptr);
        }
        virtual void callback_loggerbyInfo_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:loggerbyInfo_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_loggerbyInfo.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< LogPrxCallbackPromise::PromiseloggerbyInfoPtr > _promise_loggerbyInfo;

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __Log_all[]=
            {
                "logger",
                "loggerbyInfo"
            };

            pair<string*, string*> r = equal_range(__Log_all, __Log_all+2, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Log_all)
            {
                case 0:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_logger_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    LogPrxCallbackPromise::PromiseloggerPtr ptr = new LogPrxCallbackPromise::Promiselogger();

                    try
                    {
                    }
                    catch(std::exception &ex)
                    {
                        callback_logger_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_logger_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_logger(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_loggerbyInfo_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);

                    LogPrxCallbackPromise::PromiseloggerbyInfoPtr ptr = new LogPrxCallbackPromise::PromiseloggerbyInfo();

                    try
                    {
                    }
                    catch(std::exception &ex)
                    {
                        callback_loggerbyInfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_loggerbyInfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response->context;

                    callback_loggerbyInfo(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<LogPrxCallbackPromise> LogPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class LogCoroPrxCallback: public LogPrxCallback
    {
    public:
        virtual ~LogCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __Log_all[]=
            {
                "logger",
                "loggerbyInfo"
            };

            pair<string*, string*> r = equal_range(__Log_all, __Log_all+2, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Log_all)
            {
                case 0:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_logger_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        setResponseContext(msg->response->context);

                        callback_logger();

                    }
                    catch(std::exception &ex)
                    {
                        callback_logger_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_logger_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_loggerbyInfo_exception(msg->response->iRet);

                        return msg->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response->sBuffer);
                    try
                    {
                        setResponseContext(msg->response->context);

                        callback_loggerbyInfo();

                    }
                    catch(std::exception &ex)
                    {
                        callback_loggerbyInfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_loggerbyInfo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef tars::TC_AutoPtr<LogCoroPrxCallback> LogCoroPrxCallbackPtr;

    /* proxy for client */
    class LogProxy : public tars::ServantProxy
    {
    public:
        typedef map<string, string> TARS_CONTEXT;
        void logger(const std::string & app,const std::string & server,const std::string & file,const std::string & format,const vector<std::string> & buffer,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(server, 2);
            _os.write(file, 3);
            _os.write(format, 4);
            _os.write(buffer, 5);
            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"logger", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
        }

        void async_logger(LogPrxCallbackPtr callback,const std::string &app,const std::string &server,const std::string &file,const std::string &format,const vector<std::string> &buffer,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(server, 2);
            _os.write(file, 3);
            _os.write(format, 4);
            _os.write(buffer, 5);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"logger", _os, context, _mStatus, callback);
        }
        
        tars::Future< LogPrxCallbackPromise::PromiseloggerPtr > promise_async_logger(const std::string &app,const std::string &server,const std::string &file,const std::string &format,const vector<std::string> &buffer,const map<string, string>& context)
        {
            tars::Promise< LogPrxCallbackPromise::PromiseloggerPtr > promise;
            LogPrxCallbackPromisePtr callback = new LogPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(server, 2);
            _os.write(file, 3);
            _os.write(format, 4);
            _os.write(buffer, 5);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"logger", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_logger(LogCoroPrxCallbackPtr callback,const std::string &app,const std::string &server,const std::string &file,const std::string &format,const vector<std::string> &buffer,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(app, 1);
            _os.write(server, 2);
            _os.write(file, 3);
            _os.write(format, 4);
            _os.write(buffer, 5);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"logger", _os, context, _mStatus, callback, true);
        }

        void loggerbyInfo(const tars::LogInfo & info,const vector<std::string> & buffer,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(info, 1);
            _os.write(buffer, 2);
            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"loggerbyInfo", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
        }

        void async_loggerbyInfo(LogPrxCallbackPtr callback,const tars::LogInfo &info,const vector<std::string> &buffer,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(info, 1);
            _os.write(buffer, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"loggerbyInfo", _os, context, _mStatus, callback);
        }
        
        tars::Future< LogPrxCallbackPromise::PromiseloggerbyInfoPtr > promise_async_loggerbyInfo(const tars::LogInfo &info,const vector<std::string> &buffer,const map<string, string>& context)
        {
            tars::Promise< LogPrxCallbackPromise::PromiseloggerbyInfoPtr > promise;
            LogPrxCallbackPromisePtr callback = new LogPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(info, 1);
            _os.write(buffer, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"loggerbyInfo", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_loggerbyInfo(LogCoroPrxCallbackPtr callback,const tars::LogInfo &info,const vector<std::string> &buffer,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(info, 1);
            _os.write(buffer, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"loggerbyInfo", _os, context, _mStatus, callback, true);
        }

        LogProxy* tars_hash(int64_t key)
        {
            return (LogProxy*)ServantProxy::tars_hash(key);
        }

        LogProxy* tars_consistent_hash(int64_t key)
        {
            return (LogProxy*)ServantProxy::tars_consistent_hash(key);
        }

        LogProxy* tars_open_trace(bool traceParam = false)
        {
            return (LogProxy*)ServantProxy::tars_open_trace(traceParam);
        }

        LogProxy* tars_set_timeout(int msecond)
        {
            return (LogProxy*)ServantProxy::tars_set_timeout(msecond);
        }

        static const char* tars_prxname() { return "LogProxy"; }
    };
    typedef tars::TC_AutoPtr<LogProxy> LogPrx;

    /* servant for server */
    class Log : public tars::Servant
    {
    public:
        virtual ~Log(){}
        virtual void logger(const std::string & app,const std::string & server,const std::string & file,const std::string & format,const vector<std::string> & buffer,tars::TarsCurrentPtr current) = 0;
        static void async_response_logger(tars::TarsCurrentPtr current)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual void loggerbyInfo(const tars::LogInfo & info,const vector<std::string> & buffer,tars::TarsCurrentPtr current) = 0;
        static void async_response_loggerbyInfo(tars::TarsCurrentPtr current)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else if (current->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

    public:
        int onDispatch(tars::TarsCurrentPtr _current, vector<char> &_sResponseBuffer)
        {
            static ::std::string __tars__Log_all[]=
            {
                "logger",
                "loggerbyInfo"
            };

            pair<string*, string*> r = equal_range(__tars__Log_all, __tars__Log_all+2, _current->getFuncName());
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __tars__Log_all)
            {
                case 0:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string app;
                    std::string server;
                    std::string file;
                    std::string format;
                    vector<std::string> buffer;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("app", app);
                        tarsAttr.get("server", server);
                        tarsAttr.get("file", file);
                        tarsAttr.get("format", format);
                        tarsAttr.get("buffer", buffer);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(app, _jsonPtr->value["app"], true);
                        tars::JsonInput::readJson(server, _jsonPtr->value["server"], true);
                        tars::JsonInput::readJson(file, _jsonPtr->value["file"], true);
                        tars::JsonInput::readJson(format, _jsonPtr->value["format"], true);
                        tars::JsonInput::readJson(buffer, _jsonPtr->value["buffer"], true);
                    }
                    else
                    {
                        _is.read(app, 1, true);
                        _is.read(server, 2, true);
                        _is.read(file, 3, true);
                        _is.read(format, 4, true);
                        _is.read(buffer, 5, true);
                    }
                    logger(app,server,file,format,buffer, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    tars::LogInfo info;
                    vector<std::string> buffer;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("info", info);
                        tarsAttr.get("buffer", buffer);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(info, _jsonPtr->value["info"], true);
                        tars::JsonInput::readJson(buffer, _jsonPtr->value["buffer"], true);
                    }
                    else
                    {
                        _is.read(info, 1, true);
                        _is.read(buffer, 2, true);
                    }
                    loggerbyInfo(info,buffer, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }
    };


}



#endif
