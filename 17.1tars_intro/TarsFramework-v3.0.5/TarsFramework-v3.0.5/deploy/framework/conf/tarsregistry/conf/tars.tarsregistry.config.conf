<tars>
    <application>
        <client>
            locator                     = tars.tarsregistry.QueryObj@tcp -h registry.tars.com -p 17890
            sync-invoke-timeout=10000
            async-invoke-timeout=60000
            refresh-endpoint-interval   = 60000
            stat                        = tars.tarsstat.StatObj
            property                    = tars.tarsproperty.PropertyObj
            report-interval             = 60000
            asyncthread                 = 3
            modulename                  = tars.tarsregistry
            timeout-queue-size          = 100
        </client>
        <server>
            app      = tars
            server   = tarsregistry
            localip  = localip.tars.com
            basepath = TARS_PATH/tarsregistry/bin
            datapath = TARS_PATH/tarsregistry/data 
            logpath  = TARS_PATH/app_log 
            netthread= 2
            logpath=TARS_PATH/app_log
            logsize=10M
            config=tars.tarsconfig.ConfigObj
            notify=tars.tarsnotify.NotifyObj
            deactivating-timeout=2000
            logLevel=DEBUG
            notify=tars.tarsnotify.NotifyObj
            local=tcp -h 127.0.0.1 -p 17897 -t 3000
            node=tars.tarsnode.ServerObj@tcp -h localip.tars.com -p 19386 -t 60000
            <tars.tarsregistry.QueryObjAdapter>
                endpoint   = tcp -h localip.tars.com -p 17890 -t 10000
                allow      =
                maxconns    = 100000
                threads     = 5
                queuecap    = 100000
                queuetimeout= 6000 
                servant     = tars.tarsregistry.QueryObj 
            </tars.tarsregistry.QueryObjAdapter>
            <tars.tarsregistry.RegistryObjAdapter>
                endpoint    = tcp -h localip.tars.com -p 17891 -t 30000
                allow       =
                maxconns    = 100000
                threads     = 5
                queuecap    = 100000
                queuetimeout= 6000
                servant     = tars.tarsregistry.RegistryObj
            </tars.tarsregistry.RegistryObjAdapter>
        </server>
    </application>
    <db>
        dbhost  = db.tars.com
        dbname  = db_tars
        dbuser  = tars
        dbpass  = tars2015
        dbport  = 3306
        charset = utf8 
        dbflag = CLIENT_MULTI_STATEMENTS 
    </db>
    <reap>
        #加载object间隔时间(s)
        loadObjectsInterval = 30
        #轮询server状态的间隔时间(s)
        queryInterval       = 150

        #第一阶段加载时间间隔，位是秒
        loadObjectsInterval1 = 13
        #第一阶段加载最近时间更新的记录,默认是60秒
        LeastChangedTime1    = 600

        #第二阶段（全量）加载时间间隔，单位是秒
        loadObjectsInterval2 = 360

        #node心跳超时时间,单位是秒
        nodeTimeout         = 250
        #主控心跳超时检测时间,单位是秒
        registryTimeout    = 150

        #请求docker仓库, 获取基础镜像的sha(秒)
        checkDockerRegistry = 60

        #服务状态监控加载最近时间更新的记录，单位是秒
        querylesttime       = 300
        #主控心跳关闭开关,默认允许心跳检测，要迁移的时候设置次项为N
        # heartbeatoff=Y
     
        asyncthread = 6

        #open day log, default is N; Y means open day log
        openDayLog = N

        #check docker registry && update base image(秒)
        checkDockerRegistry = 60
    </reap>
    <objname>
        #patch对象
        patchServerObj  = tars.tarspatch.PatchObj
        #查询列表对象
        QueryObjName    = tars.tarsregistry.QueryObj
        #调用的Registry对象
        RegistryObjName = tars.tarsregistry.RegistryObj
    </objname>
    <objcache>
        min_block = 50
        max_block = 200
        factor    = 1.2
        FilePath  = TARS_PATH/tarsregistry/util/objectCache.dat
        FileSize  = 8M
    </objcache>
    <nodeinfo>
        #node默认模板名称
        defaultTemplate = tars.tarsnode
    </nodeinfo>
    <container>
        socket = /var/run/docker.sock
    </container>
</tars>
